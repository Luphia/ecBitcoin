const child_process = require('child_process');
const start = new Date().getTime();

/*
var MyWallet = require('blockchain.info/MyWallet');
var password = 'KJocFWoJC6UIrG2Jg6b2RqEe';
var apiCode = 'eacb3093-d5b2-4c7e-9937-7fb86d307270';

var options = { apiCode, apiHost: 'http://localhost:3000' }
var wallet = new MyWallet('myIdentifier', 'myPassword123', options)
wallet.getBalance().then(function (response) { console.log('My balance is %d!', response.balance); })

child_process.exec('bitcoin-cli getreceivedbyaddress 1JbK3AqVofQE6FgqAR5TiqQgsmfXok7GrA', (err, stdout, stderr) => { console.log(parseFloat(stdout.trim())) })
*/

const promiseExec = ({ command }) => {
    return new Promise((resolve, reject) => {
        child_process.exec(command, { maxBuffer: 1024 * 1024 * 5 }, (err, stdout, stderr) => {
            if (err) {
                reject(err);
            }
            else if (stderr) {
                reject(new Error(stderr));
            }
            else {
                const addr = stdout.trim();
                resolve(addr);
            }
        });
    });
};

const createNewAddress = () => {
    const command = 'bitcoin-cli getnewaddress rouge';
    return promiseExec({ command });
};

const readTransaction = ({ txid }) => {
    const command = `bitcoin-cli getrawtransaction ${txid}`;
    return promiseExec({ command });
};

const decodeTransaction = ({ hex }) => {
    const command = `bitcoin-cli decoderawtransaction ${hex}`;
    return promiseExec({ command });
};

const getReceive = ({ addr }) => {
    const command = `bitcoin-cli getreceivedbyaddress ${addr}`;
    return promiseExec({ command }).then(v => parseFloat(v));
};

const scanRawTransaction = ({ addr }) => {
    return promiseExec({ command: 'bitcoin-cli getrawmempool' }).then((rs) => {
        const txids = JSON.parse(rs);
        return Promise.all(txids.map((txid) => {
            return readTransaction({ txid });
        }));
    }).then((hexs) => {
        return Promise.all(hexs.map((hex) => {
            return decodeTransaction({ hex });
        }));
    }).then((data) => {
        const result = data.reduce((prev, curr) => {
            const json = JSON.parse(curr);
            let rs = prev;
            json.vout.map((d) => {
                if(d.scriptPubKey.addresses && d.scriptPubKey.addresses.indexOf(addr) > -1) {
                    rs += d.value;
                }
            })
            return rs;
        }, 0);

        console.log(data.length);
        console.log(new Date().getTime() - start);
        console.log(addr, result);
        return result;
    }).catch(console.log);
};

const dectectReceive = ({ addr }) => {
    
};


scanRawTransaction({ addr: '1HjGi4Riqj8Xwr5H8W9vhB6RbZ9yGU2jjZ' });